{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import random\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.metrics import auc\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.externals import joblib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "complete=pd.read_csv('D:/Assignment/Python/Sample DataSets/Pima_India/pima_indians_diabetesComplete.csv')\n",
    "complete_data = pd.DataFrame()\n",
    "complete_data = complete"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "#80 % for Train :\n",
    "train_data = complete_data.iloc[:600,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "ClassLabel = train_data.values [:,8]\n",
    "RemainingCols = train_data.values [:,:7]\n",
    "RC_Train = pd.DataFrame(RemainingCols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "Classifer_ = RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
    "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
    "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
    "            min_samples_leaf=1, min_samples_split=2,\n",
    "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=None,\n",
    "            oob_score=False, random_state=None, verbose=0,\n",
    "            warm_start=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=None,\n",
       "            oob_score=False, random_state=None, verbose=0,\n",
       "            warm_start=False)"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Classifer_.fit(RC_Train,ClassLabel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree Classifier Accuracy is  98.0\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[390,   2],\n",
       "       [ 10, 198]], dtype=int64)"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TrainScoreTest= Classifer_.predict(RC_Train)\n",
    "print (\"RandomForestClassifier Classifier Accuracy is \",accuracy_score (ClassLabel,TrainScoreTest)*100)\n",
    "confusion_matrix(ClassLabel, TrainScoreTest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.11359356, 0.30401802, 0.10874528, 0.08246421, 0.07367741,\n",
       "       0.19187851, 0.125623  ])"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "importances = Classifer_.feature_importances_\n",
    "importances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Feature Importance :\n",
    "#std = np.std([tree.feature_importances_ for tree in Classifer_.estimators_],axis=0)\n",
    "#indices = np.argsort(importances)[::-1]\n",
    "#print(\"Feature ranking:\")\n",
    "#for f in range(RemainingCols.shape[1]):\n",
    "    #print(%d. feature %d (%f) % (f + 1, indices[f], importances[indices[f]]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.98\n"
     ]
    }
   ],
   "source": [
    "#Saving Model :\n",
    "#data : ['finalized_model_Medium.sav']\n",
    "\n",
    "#saving model\\n\",\n",
    "filename = 'finalized_Classifier.sav'\n",
    "joblib.dump(Classifer_,filename)\n",
    "\n",
    "#loading model\n",
    "loaded_model = joblib.load(filename)\n",
    "result = loaded_model.score(RemainingCols,ClassLabel)\n",
    "print(result)\n",
    "#DONE TILL HERE !\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Scoring Data Split :\n",
    "test_data = complete_data.iloc[600:,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RandomForestClassifier Classifier Accuracy is  71.42857142857143\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[91, 17],\n",
       "       [31, 29]], dtype=int64)"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#SCORING\n",
    "ClassLabel = test_data.values [:,8]\n",
    "RemainingCols = test_data.values [:,:7]\n",
    "RC_Score = pd.DataFrame(RemainingCols)\n",
    "ClassLabelScore = pd.DataFrame(ClassLabel)\n",
    "Scoring = loaded_model.predict(RemainingCols)\n",
    "print (\"RandomForestClassifier Classifier Accuracy is \", accuracy_score(ClassLabel,Scoring)*100)\n",
    "output =confusion_matrix(ClassLabel, Scoring)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
